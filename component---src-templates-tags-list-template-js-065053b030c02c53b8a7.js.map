{"version":3,"sources":["webpack:///./src/templates/tags-list-template.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_2__","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_2___default","react_grid_system__WEBPACK_IMPORTED_MODULE_3__","_components_Layout__WEBPACK_IMPORTED_MODULE_4__","_components_Page__WEBPACK_IMPORTED_MODULE_5__","TagsListTemplate","_ref","data","_data$site$siteMetada","site","siteMetadata","title","subtitle","group","allMarkdownRemark","a","createElement","description","fluid","map","tag","key","fieldValue","to","kebabCase","totalCount"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,IAAAS,EAAAT,EAAA,KAAAU,EAAAV,EAAAO,EAAAE,GAAAE,EAAAX,EAAA,KAAAY,EAAAZ,EAAA,KAAAa,EAAAb,EAAA,KAkCaI,EAAK,aAqBHU,UAhDU,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAAWC,EACTD,EAAKE,KAAKC,aAA9BC,EAD6BH,EAC7BG,MAAOC,EADsBJ,EACtBI,SACPC,EAAUN,EAAKO,kBAAfD,MAER,OACEhB,EAAAkB,EAAAC,cAACb,EAAA,EAAD,CAAQQ,MAAK,UAAYA,EAASM,YAAaL,GAC7Cf,EAAAkB,EAAAC,cAACd,EAAA,UAAD,CAAWgB,OAAK,GACdrB,EAAAkB,EAAAC,cAACd,EAAA,IAAD,KACEL,EAAAkB,EAAAC,cAACd,EAAA,IAAD,KACEL,EAAAkB,EAAAC,cAACZ,EAAA,EAAD,CAAMO,MAAM,QACVd,EAAAkB,EAAAC,cAAA,UACGH,EAAMM,IAAI,SAAAC,GAAG,OACZvB,EAAAkB,EAAAC,cAAA,MAAIK,IAAKD,EAAIE,YACXzB,EAAAkB,EAAAC,cAACjB,EAAA,KAAD,CAAMwB,GAAE,QAAUC,IAAUJ,EAAIE,YAAxB,KACLF,EAAIE,WADP,KACqBF,EAAIK,WADzB","file":"component---src-templates-tags-list-template-js-065053b030c02c53b8a7.js","sourcesContent":["import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport kebabCase from \"lodash/kebabCase\";\nimport { Container, Row, Col } from \"react-grid-system\";\nimport Layout from \"../components/Layout\";\nimport Page from \"../components/Page\";\n\nconst TagsListTemplate = ({ data }) => {\n  const { title, subtitle } = data.site.siteMetadata;\n  const { group } = data.allMarkdownRemark;\n\n  return (\n    <Layout title={`Tags - ${title}`} description={subtitle}>\n      <Container fluid>\n        <Row>\n          <Col>\n            <Page title=\"Tags\">\n              <ul>\n                {group.map(tag => (\n                  <li key={tag.fieldValue}>\n                    <Link to={`/tag/${kebabCase(tag.fieldValue)}/`}>\n                      {tag.fieldValue} ({tag.totalCount})\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            </Page>\n          </Col>\n        </Row>\n      </Container>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query TagsListQuery {\n    site {\n      siteMetadata {\n        title\n        subtitle\n      }\n    }\n    allMarkdownRemark(\n      filter: {\n        frontmatter: { template: { eq: \"course\" }, draft: { ne: true } }\n      }\n    ) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n\nexport default TagsListTemplate;\n"],"sourceRoot":""}